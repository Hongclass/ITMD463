/*
Deployment script for VolunteerData_1

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "VolunteerData_1"
:setvar DefaultFilePrefix "VolunteerData_1"
:setvar DefaultDataPath "C:\Users\JJ\AppData\Local\Microsoft\VisualStudio\SSDT\VolunteerData"
:setvar DefaultLogPath "C:\Users\JJ\AppData\Local\Microsoft\VisualStudio\SSDT\VolunteerData"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE,
                DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367)) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Rename refactoring operation with key 8c62fcaa-be82-41e6-b396-3c8d048bbb5a is skipped, element [dbo].[Volunteer].[Id] (SqlSimpleColumn) will not be renamed to VolunteerID';


GO
PRINT N'Rename refactoring operation with key c79a6e82-1d9e-40ca-9d70-14addb4fe352, d481f84e-67b9-471b-8542-9830bad4cc31 is skipped, element [dbo].[Volunteer].[Gender] (SqlSimpleColumn) will not be renamed to Age';


GO
PRINT N'Rename refactoring operation with key 346d14a1-85a1-4ebd-86a5-0ce9d0a25d56, effd8369-695d-43a7-a848-41914e1ff6f6 is skipped, element [dbo].[Event].[Id] (SqlSimpleColumn) will not be renamed to EventID';


GO
PRINT N'Rename refactoring operation with key 7a795fed-8212-4718-baf7-b786691ed63b is skipped, element [dbo].[Event].[Start Date] (SqlSimpleColumn) will not be renamed to StartDate';


GO
PRINT N'Rename refactoring operation with key 6ea9082b-fa17-4604-86fb-621f591c0aac is skipped, element [dbo].[Event].[End date] (SqlSimpleColumn) will not be renamed to EndDate';


GO
PRINT N'Rename refactoring operation with key fb5bff23-0360-4796-83aa-f0a625a3b9b3, 6ddb9ef3-3c3a-466a-8a34-a71ff79fcbc3 is skipped, element [dbo].[Assignment].[Id] (SqlSimpleColumn) will not be renamed to AssignmentID';


GO
PRINT N'Rename refactoring operation with key 8269a196-98f5-46e6-b83e-875e0a4497d4 is skipped, element [dbo].[Assignment].[VolunteerId] (SqlSimpleColumn) will not be renamed to VolunteerID';


GO
PRINT N'Rename refactoring operation with key dbf3d358-6f91-4358-a402-9840e4458f36 is skipped, element [dbo].[Volunteer].[Contact] (SqlSimpleColumn) will not be renamed to Phone';


GO
PRINT N'Creating [dbo].[Assignment]...';


GO
CREATE TABLE [dbo].[Assignment] (
    [AssignmentID] INT IDENTITY (1, 1) NOT NULL,
    [EventID]      INT NOT NULL,
    [VolunteerID]  INT NOT NULL,
    PRIMARY KEY CLUSTERED ([AssignmentID] ASC)
);


GO
PRINT N'Creating [dbo].[Event]...';


GO
CREATE TABLE [dbo].[Event] (
    [EventID]     INT            IDENTITY (1, 1) NOT NULL,
    [Description] NVARCHAR (MAX) NULL,
    [StartDate]   DATETIME       NULL,
    [EndDate]     DATETIME       NULL,
    [Location]    NVARCHAR (MAX) NULL,
    PRIMARY KEY CLUSTERED ([EventID] ASC)
);


GO
PRINT N'Creating [dbo].[Volunteer]...';


GO
CREATE TABLE [dbo].[Volunteer] (
    [VolunteerID] INT           IDENTITY (1, 1) NOT NULL,
    [LastName]    NVARCHAR (50) NULL,
    [FirstName]   NVARCHAR (50) NULL,
    [Age]         INT           NULL,
    [Phone]       NVARCHAR (50) NULL,
    [Email]       NVARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([VolunteerID] ASC)
);


GO
PRINT N'Creating [dbo].[FK_dbo.Assignment_dbo.Event_EventID]...';


GO
ALTER TABLE [dbo].[Assignment] WITH NOCHECK
    ADD CONSTRAINT [FK_dbo.Assignment_dbo.Event_EventID] FOREIGN KEY ([EventID]) REFERENCES [dbo].[Event] ([EventID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_dbo.Assignment_dbo.Volunteer_VolunteerID]...';


GO
ALTER TABLE [dbo].[Assignment] WITH NOCHECK
    ADD CONSTRAINT [FK_dbo.Assignment_dbo.Volunteer_VolunteerID] FOREIGN KEY ([VolunteerID]) REFERENCES [dbo].[Volunteer] ([VolunteerID]) ON DELETE CASCADE;


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8c62fcaa-be82-41e6-b396-3c8d048bbb5a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8c62fcaa-be82-41e6-b396-3c8d048bbb5a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c79a6e82-1d9e-40ca-9d70-14addb4fe352')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c79a6e82-1d9e-40ca-9d70-14addb4fe352')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd481f84e-67b9-471b-8542-9830bad4cc31')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d481f84e-67b9-471b-8542-9830bad4cc31')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '346d14a1-85a1-4ebd-86a5-0ce9d0a25d56')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('346d14a1-85a1-4ebd-86a5-0ce9d0a25d56')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '7a795fed-8212-4718-baf7-b786691ed63b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('7a795fed-8212-4718-baf7-b786691ed63b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '6ea9082b-fa17-4604-86fb-621f591c0aac')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('6ea9082b-fa17-4604-86fb-621f591c0aac')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'fb5bff23-0360-4796-83aa-f0a625a3b9b3')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('fb5bff23-0360-4796-83aa-f0a625a3b9b3')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'effd8369-695d-43a7-a848-41914e1ff6f6')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('effd8369-695d-43a7-a848-41914e1ff6f6')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8269a196-98f5-46e6-b83e-875e0a4497d4')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8269a196-98f5-46e6-b83e-875e0a4497d4')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '6ddb9ef3-3c3a-466a-8a34-a71ff79fcbc3')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('6ddb9ef3-3c3a-466a-8a34-a71ff79fcbc3')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'dbf3d358-6f91-4358-a402-9840e4458f36')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('dbf3d358-6f91-4358-a402-9840e4458f36')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

MERGE INTO Event AS Target 
USING (VALUES 
        (1, 'Volunteer Orientation Session - 1', '2016-09-01 8:00', '2016-09-01 10:00','Lakeview Pantry Sheridan'), 
        (2, 'Volunteer Orientation Session - 2', '2016-09-01 8:00', '2016-09-01 10:00','Lakeview Pantry Sheridan'), 
        (3, 'Cooking with Open Door Shelter', '2016-09-02 8:00', '2016-09-02 10:00','Glenwood Sunday Market'), 
        (4, 'Pet Therapy', '2016-09-07 8:00', '2016-09-07 10:00','Rogers Park')
) 
AS Source (EventID, Description, StartDate, EndDate, Location) 
ON Target.EventID = Source.EventID 
WHEN NOT MATCHED BY TARGET THEN 
INSERT (Description, StartDate, EndDate, Location) 
VALUES (Description, StartDate, EndDate, Location);

MERGE INTO Volunteer AS Target
USING (VALUES 
        (1, 'Tibbetts', 'Donnie', 43, '331-331-3333', 'dtibbetts@gmail.com'), 
        (2, 'Guzman', 'Liza',36, '555-555-5555', 'lguzman@hotmail.com'), 
		(3, 'Catlett', 'Phil',49, '345-123-3333', 'pgatlett@yahoo.com')
)
AS Source (VolunteerID, LastName, FirstName, Age, Phone, Email)
ON Target.VolunteerID = Source.VolunteerID
WHEN NOT MATCHED BY TARGET THEN
INSERT (LastName, FirstName, Age, Phone, Email)
VALUES (LastName, FirstName, Age, Phone, Email);


MERGE INTO Assignment AS Target
USING (VALUES 
	(1, 1, 1),
	(2, 1, 2),
	(3, 2, 3),
	(4, 2, 1),
	(5, 3, 1),
	(6, 3, 2)
)
AS Source (AssignmentID, EventID, VolunteerID)
ON Target.AssignmentID = Source.AssignmentID
WHEN NOT MATCHED BY TARGET THEN
INSERT (EventID, VolunteerID)
VALUES (EventID, VolunteerID);
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Assignment] WITH CHECK CHECK CONSTRAINT [FK_dbo.Assignment_dbo.Event_EventID];

ALTER TABLE [dbo].[Assignment] WITH CHECK CHECK CONSTRAINT [FK_dbo.Assignment_dbo.Volunteer_VolunteerID];


GO
PRINT N'Update complete.';


GO
