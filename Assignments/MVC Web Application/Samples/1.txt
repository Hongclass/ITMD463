Entities - Volunteers (With demographics and contact information), 
Events - Must have information to define event (Description, Start Date, End date, Location), 
Assignment - Assign volunteers to events without time conflict,

_______________________________
CREATE TABLE [dbo].[Volunteer]
(
	[VolunteerID] INT IDENTITY (1, 1) NOT NULL, 
    [LastName] NVARCHAR(50) NULL, 
    [FirstName] NVARCHAR(50) NULL, 
    [Age] INT NULL, 
    [Phone] NVARCHAR(50) NULL,
    [Email] NVARCHAR(50) NULL, 
    PRIMARY KEY CLUSTERED ([VolunteerID] ASC)
)

CREATE TABLE [dbo].[Event]
(
	[EventID] INT IDENTITY (1, 1) NOT NULL, 
    [Description] NVARCHAR(MAX) NULL, 
    [StartDate] DATETIME NULL, 
    [EndDate] DATETIME NULL, 
    [Location] NVARCHAR(MAX) NULL,
    PRIMARY KEY CLUSTERED ([EventID] ASC)
)

CREATE TABLE [dbo].[Assignment]
(
	[AssignmentID] INT IDENTITY (1, 1) NOT NULL, 
    [EventID] INT NOT NULL,
    [VolunteerID] INT NOT NULL, 
	PRIMARY KEY CLUSTERED ([AssignmentID] ASC),
    CONSTRAINT [FK_dbo.Assignment_dbo.Event_EventID] FOREIGN KEY ([EventID]) 
        REFERENCES [dbo].[Event] ([EventID]) ON DELETE CASCADE,
    CONSTRAINT [FK_dbo.Assignment_dbo.Volunteer_VolunteerID] FOREIGN KEY ([VolunteerID]) 
        REFERENCES [dbo].[Volunteer] ([VolunteerID]) ON DELETE CASCADE
)


__________________
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
MERGE INTO Event AS Target 
USING (VALUES 
        (1, 'Volunteer Orientation Session - 1', '2016-09-01 8:00', '2016-09-01 10:00','Lakeview Pantry Sheridan'), 
        (2, 'Volunteer Orientation Session - 2', '2016-09-01 8:00', '2016-09-01 10:00', 'Lakeview Pantry Sheridan'), 
        (3, 'Cooking with Open Door Shelter', '2016-09-02 8:00', '2016-09-02 10:00','Glenwood Sunday Market'), 
        (4, 'Pet Therapy', ''2016-09-07 8:00', '2016-09-07 10:00','Rogers Park')
) 
AS Source (EventID, Description, StartDate, EndDate, Location) 
ON Target.EventID = Source.EventID 
WHEN NOT MATCHED BY TARGET THEN 
INSERT (Description, StartDate, EndDate, Location) 
VALUES (Description, StartDate, EndDate, Location);

MERGE INTO Volunteer AS Target
USING (VALUES 
        (1, 'Tibbetts', 'Donnie', '331-331-3333', 'dtibbetts@gmail.com'), 
        (2, 'Guzman', 'Liza','555-555-5555', 'lguzman@hotmail.com'), 
		(3, 'Catlett', 'Phil','345-123-3333', 'pgatlett@yahoo.com')
)
AS Source (VolunteerID, LastName, FirstName, Phone, Email)
ON Target.VolunteerID = Source.VolunteerID
WHEN NOT MATCHED BY TARGET THEN
INSERT (LastName, FirstName, Phone, Email)
VALUES (LastName, FirstName, Phone, Email);

MERGE INTO Assignment AS Target
USING (VALUES 
	(1, 1, 1),
	(2, 1, 2),
	(3, 2, 3),
	(4, 2, 1),
	(5, 3, 1),
	(6, 3, 2)
)
AS Source (AssignmentID, EventID, VolunteerID)
ON Target.AssignmentID = Source.AssignmentID
WHEN NOT MATCHED BY TARGET THEN
INSERT (EventID, VolunteerID)
VALUES (EventID, VolunteerID);

"select * from [Assignment] join [Location] on [Assignment].[LocationId] = [Location].[LocationId] where NOT (([AssignmentEnd] <= @start) OR ([AssignmentStart] >= @end)) and [PersonId] = @person and [AssignmentRecurrence] is null"

  IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        List < ValidationResult >  res =new List<ValidationResult>();
        if (ExpireDate < DateTime.Today)
        {
            ValidationResult mss=new ValidationResult("Expire date must be greater than or equal to Today");
            res.Add(mss);

        }
        return res; 
    }